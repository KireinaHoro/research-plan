
@inproceedings{benson_understanding_2009,
	address = {Barcelona Spain},
	title = {Understanding data center traffic characteristics},
	isbn = {978-1-60558-443-0},
	url = {https://dl.acm.org/doi/10.1145/1592681.1592692},
	doi = {10.1145/1592681.1592692},
	abstract = {As data centers become more and more central in Internet communications, both research and operations communities have begun to explore how to better design and manage them. In this paper, we present a preliminary empirical study of end-to-end traﬃc patterns in data center networks that can inform and help evaluate research and operational approaches. We analyze SNMP logs collected at 19 data centers to examine temporal and spatial variations in link loads and losses. We ﬁnd that while links in the core are heavily utilized the ones closer to the edge observe a greater degree of loss. We then study packet traces collected at a small number of switches in one data center and ﬁnd evidence of ON-OFF traﬃc behavior. Finally, we develop a framework that derives ON-OFF traﬃc parameters for data center trafﬁc sources that best explain the SNMP data collected for the data center. We show that the framework can be used to evaluate data center traﬃc engineering approaches. We are also applying the framework to design network-level traﬃc generators for data centers.},
	language = {en},
	urldate = {2023-08-04},
	booktitle = {Proceedings of the 1st {ACM} workshop on {Research} on enterprise networking},
	publisher = {ACM},
	author = {Benson, Theophilus and Anand, Ashok and Akella, Aditya and Zhang, Ming},
	month = aug,
	year = {2009},
	pages = {65--72},
	file = {Benson et al. - 2009 - Understanding data center traffic characteristics.pdf:/local/home/pengxu/Zotero/storage/8N9DMMPU/Benson et al. - 2009 - Understanding data center traffic characteristics.pdf:application/pdf},
}

@inproceedings{cock_enzian_2022,
	address = {Lausanne Switzerland},
	title = {Enzian: an open, general, {CPU}/{FPGA} platform for systems software research},
	isbn = {978-1-4503-9205-1},
	shorttitle = {Enzian},
	url = {https://dl.acm.org/doi/10.1145/3503222.3507742},
	doi = {10.1145/3503222.3507742},
	abstract = {Hybrid computing platforms, comprising CPU cores and FPGA logic, are increasingly used for accelerating data-intensive workloads in cloud deployments, and are a growing topic of interest in systems research. However, from a research perspective, existing hardware platforms are limited: they are often optimized for concrete, narrow use-cases and, therefore lack the flexibility needed to explore other applications and configurations. We show that a research group can design and build a more general, open, and affordable hardware platform for hybrid systems research. The platform, Enzian, is capable of duplicating the functionality of existing CPU/FPGA systems with comparable performance but in an open, flexible system. It couples a large FPGA with a server-class CPU in an asymmetric cache-coherent NUMA system. Enzian also enables research not possible with existing hybrid platforms, through explicit access to coherence messages, extensive thermal and power instrumentation, and an open, programmable baseboard management processor.},
	language = {en},
	urldate = {2022-09-27},
	booktitle = {Proceedings of the 27th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Cock, David and Ramdas, Abishek and Schwyn, Daniel and Giardino, Michael and Turowski, Adam and He, Zhenhao and Hossle, Nora and Korolija, Dario and Licciardello, Melissa and Martsenko, Kristina and Achermann, Reto and Alonso, Gustavo and Roscoe, Timothy},
	month = feb,
	year = {2022},
	pages = {434--451},
	file = {Cock et al. - 2022 - Enzian an open, general, CPUFPGA platform for sy.pdf:/local/home/pengxu/Zotero/storage/KID6KRJP/Cock et al. - 2022 - Enzian an open, general, CPUFPGA platform for sy.pdf:application/pdf},
}

@inproceedings{seemakhupt_cloud-scale_2023,
	address = {Koblenz Germany},
	title = {A {Cloud}-{Scale} {Characterization} of {Remote} {Procedure} {Calls}},
	isbn = {9798400702297},
	url = {https://dl.acm.org/doi/10.1145/3600006.3613156},
	doi = {10.1145/3600006.3613156},
	language = {en},
	urldate = {2024-01-10},
	booktitle = {Proceedings of the 29th {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Seemakhupt, Korakit and Stephens, Brent E. and Khan, Samira and Liu, Sihang and Wassel, Hassan and Yeganeh, Soheil Hassas and Snoeren, Alex C. and Krishnamurthy, Arvind and Culler, David E. and Levy, Henry M.},
	month = oct,
	year = {2023},
	pages = {498--514},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/NQM9QXJU/Seemakhupt et al. - 2023 - A Cloud-Scale Characterization of Remote Procedure.pdf:application/pdf},
}

@inproceedings{lazarev_dagger_2021,
	address = {Virtual USA},
	title = {Dagger: efficient and fast {RPCs} in cloud microservices with near-memory reconfigurable {NICs}},
	isbn = {978-1-4503-8317-2},
	shorttitle = {Dagger},
	url = {https://dl.acm.org/doi/10.1145/3445814.3446696},
	doi = {10.1145/3445814.3446696},
	language = {en},
	urldate = {2024-01-15},
	booktitle = {Proceedings of the 26th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Lazarev, Nikita and Xiang, Shaojie and Adit, Neil and Zhang, Zhiru and Delimitrou, Christina},
	month = apr,
	year = {2021},
	pages = {36--51},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/JK5PR923/Lazarev et al. - 2021 - Dagger efficient and fast RPCs in cloud microserv.pdf:application/pdf},
}

@inproceedings{qureshi_fathom_2023,
	address = {New York NY USA},
	title = {Fathom: {Understanding} {Datacenter} {Application} {Network} {Performance}},
	isbn = {9798400702365},
	shorttitle = {Fathom},
	url = {https://dl.acm.org/doi/10.1145/3603269.3604815},
	doi = {10.1145/3603269.3604815},
	language = {en},
	urldate = {2024-01-16},
	booktitle = {Proceedings of the {ACM} {SIGCOMM} 2023 {Conference}},
	publisher = {ACM},
	author = {Qureshi, Mubashir Adnan and Yan, Junhua and Cheng, Yuchung and Yeganeh, Soheil Hassas and Seung, Yousuk and Cardwell, Neal and De Bruijn, Willem and Jacobson, Van and Kaur, Jasleen and Wetherall, David and Vahdat, Amin},
	month = sep,
	year = {2023},
	pages = {394--405},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/BDHF2PZM/Qureshi et al. - 2023 - Fathom Understanding Datacenter Application Netwo.pdf:application/pdf},
}

@inproceedings{karandikar_hardware_2021,
	address = {Virtual Event Greece},
	title = {A {Hardware} {Accelerator} for {Protocol} {Buffers}},
	isbn = {978-1-4503-8557-2},
	url = {https://dl.acm.org/doi/10.1145/3466752.3480051},
	doi = {10.1145/3466752.3480051},
	abstract = {Serialization frameworks are a fundamental component of scale-out systems, but introduce significant compute overheads. However, they are amenable to acceleration with specialized hardware. To understand the trade-offs involved in architecting such an accelerator, we present the first in-depth study of serialization framework usage at scale by profiling Protocol Buffers (“protobuf”) usage across Google’s datacenter fleet. We use this data to build HyperProtoBench, an open-source benchmark representative of key serialization-framework user services at scale. In doing so, we identify key insights that challenge prevailing assumptions about serialization framework usage.},
	language = {en},
	urldate = {2024-06-21},
	booktitle = {{MICRO}-54: 54th {Annual} {IEEE}/{ACM} {International} {Symposium} on {Microarchitecture}},
	publisher = {ACM},
	author = {Karandikar, Sagar and Leary, Chris and Kennelly, Chris and Zhao, Jerry and Parimi, Dinesh and Nikolic, Borivoje and Asanovic, Krste and Ranganathan, Parthasarathy},
	month = oct,
	year = {2021},
	pages = {462--478},
	file = {Karandikar et al. - 2021 - A Hardware Accelerator for Protocol Buffers.pdf:/local/home/pengxu/Zotero/storage/KNUAGARD/Karandikar et al. - 2021 - A Hardware Accelerator for Protocol Buffers.pdf:application/pdf},
}

@inproceedings{schuh_cc-nic_2024,
	address = {La Jolla CA USA},
	title = {{CC}-{NIC}: a {Cache}-{Coherent} {Interface} to the {NIC}},
	isbn = {9798400703720},
	shorttitle = {{CC}-{NIC}},
	url = {https://dl.acm.org/doi/10.1145/3617232.3624868},
	doi = {10.1145/3617232.3624868},
	language = {en},
	urldate = {2024-07-15},
	booktitle = {Proceedings of the 29th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}, {Volume} 1},
	publisher = {ACM},
	author = {Schuh, Henry N. and Krishnamurthy, Arvind and Culler, David and Levy, Henry M. and Rizzo, Luigi and Khan, Samira and Stephens, Brent E.},
	month = apr,
	year = {2024},
	pages = {52--68},
	file = {Full Text:/local/home/pengxu/Zotero/storage/XF8FNCG7/Schuh et al. - 2024 - CC-NIC a Cache-Coherent Interface to the NIC.pdf:application/pdf},
}

@inproceedings{zhang_demikernel_2021,
	address = {Virtual Event Germany},
	title = {The {Demikernel} {Datapath} {OS} {Architecture} for {Microsecond}-scale {Datacenter} {Systems}},
	isbn = {978-1-4503-8709-5},
	url = {https://dl.acm.org/doi/10.1145/3477132.3483569},
	doi = {10.1145/3477132.3483569},
	abstract = {Datacenter systems and I/O devices now run at single-digit microsecond latencies, requiring ns-scale operating systems. Traditional kernel-based operating systems impose an unaffordable overhead, so recent kernel-bypass OSes [73] and libraries [23] eliminate the OS kernel from the I/O datapath. However, none of these systems offer a general-purpose datapath OS replacement that meet the needs of µs-scale systems. This paper proposes Demikernel, a flexible datapath OS and architecture designed for heterogenous kernel-bypass devices and µs-scale datacenter systems. We build two prototype Demikernel OSes and show that minimal effort is needed to port existing µs-scale systems. Once ported, Demikernel lets applications run across heterogenous kernel-bypass devices with ns-scale overheads and no code changes.},
	language = {en},
	urldate = {2024-07-11},
	booktitle = {Proceedings of the {ACM} {SIGOPS} 28th {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Zhang, Irene and Raybuck, Amanda and Patel, Pratyush and Olynyk, Kirk and Nelson, Jacob and Leija, Omar S. Navarro and Martinez, Ashlie and Liu, Jing and Simpson, Anna Kornfeld and Jayakar, Sujay and Penna, Pedro Henrique and Demoulin, Max and Choudhury, Piali and Badam, Anirudh},
	month = oct,
	year = {2021},
	pages = {195--211},
	file = {Zhang et al. - 2021 - The Demikernel Datapath OS Architecture for Micros.pdf:/local/home/pengxu/Zotero/storage/A43SAV8Y/Zhang et al. - 2021 - The Demikernel Datapath OS Architecture for Micros.pdf:application/pdf},
}

@misc{humphries_wave_2024,
	title = {Wave: {A} {Split} {OS} {Architecture} for {Application} {Engines}},
	shorttitle = {Wave},
	url = {http://arxiv.org/abs/2408.17351},
	abstract = {The end of Moore’s Law and the tightening performance requirements in today’s clouds make re-architecting the software stack a necessity. To address this, cloud providers and vendors offload the virtualization control plane and data plane, along with the host OS data plane, to IPUs (SmartNICs), recovering scarce host resources that are then used by applications. However, the host OS control plane–encompassing kernel thread scheduling, memory management, the network stack, file systems, and more–is left on the host CPU and degrades workload performance. This paper presents Wave, a split OS architecture that moves OS subsystem policies to the IPU while keeping OS mechanisms on the host CPU. Wave not only frees host CPU resources, but it reduces host workload interference and leverages network insights on the IPU to improve policy decisions. Wave makes OS control plane offloading practical despite high host-IPU communication latency, lack of a coherent interconnect, and operation across two system images. We present Wave’s design and implementation, and implement several OS subsystems in Wave, including kernel thread scheduling, the control plane for a network stack, and memory management. We then evaluate the Wave subsystems on Stubby (scheduling and network), our GCE VM service (scheduling), and RocksDB (memory management and scheduling). We demonstrate that Wave subsystems are competitive with and often superior to on-host subsystems, saving 8 host CPUs for Stubby, 16 host CPUs for database memory management, and improving VM performance by up to 11.2\%.},
	language = {en},
	urldate = {2024-09-20},
	publisher = {arXiv},
	author = {Humphries, Jack Tigar and Natu, Neel and Kaffes, Kostis and Novaković, Stanko and Turner, Paul and Levy, Hank and Culler, David and Kozyrakis, Christos},
	month = aug,
	year = {2024},
	note = {arXiv:2408.17351 [cs]},
	keywords = {Computer Science - Operating Systems},
	file = {PDF:/local/home/pengxu/Zotero/storage/HQTXATF2/Humphries et al. - 2024 - Wave A Split OS Architecture for Application Engines.pdf:application/pdf},
}

@inproceedings{iyer_achieving_2023,
	address = {Koblenz Germany},
	title = {Achieving {Microsecond}-{Scale} {Tail} {Latency} {Efficiently} with {Approximate} {Optimal} {Scheduling}},
	isbn = {9798400702297},
	url = {https://dl.acm.org/doi/10.1145/3600006.3613136},
	doi = {10.1145/3600006.3613136},
	abstract = {Datacenter applications expect microsecond-scale service times and tightly bound tail latency, with future workloads expected to be even more demanding. To address this challenge, state-of-the-art runtimes employ theoretically optimal scheduling policies, namely a single request queue and strict preemption.},
	language = {en},
	urldate = {2024-09-20},
	booktitle = {Proceedings of the 29th {Symposium} on {Operating} {Systems} {Principles}},
	publisher = {ACM},
	author = {Iyer, Rishabh and Unal, Musa and Kogias, Marios and Candea, George},
	month = oct,
	year = {2023},
	pages = {466--481},
	file = {PDF:/local/home/pengxu/Zotero/storage/QVWI34SI/Iyer et al. - 2023 - Achieving Microsecond-Scale Tail Latency Efficiently with Approximate Optimal Scheduling.pdf:application/pdf},
}

@inproceedings{kaffes_shinjuku_2019,
	title = {Shinjuku: {Preemptive} {Scheduling} for \{μsecond-scale\} {Tail} {Latency}},
	isbn = {978-1-931971-49-2},
	shorttitle = {Shinjuku},
	url = {https://www.usenix.org/conference/nsdi19/presentation/kaffes},
	language = {en},
	urldate = {2024-09-20},
	author = {Kaffes, Kostis and Chong, Timothy and Humphries, Jack Tigar and Belay, Adam and Mazières, David and Kozyrakis, Christos},
	year = {2019},
	pages = {345--360},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/I6P3NZG2/Kaffes et al. - 2019 - Shinjuku Preemptive Scheduling for μsecond-scale Tail Latency.pdf:application/pdf},
}

@inproceedings{fried_caladan_2020,
	title = {Caladan: {Mitigating} {Interference} at {Microsecond} {Timescales}},
	isbn = {978-1-939133-19-9},
	shorttitle = {Caladan},
	url = {https://www.usenix.org/conference/osdi20/presentation/fried},
	language = {en},
	urldate = {2024-09-22},
	author = {Fried, Joshua and Ruan, Zhenyuan and Ousterhout, Amy and Belay, Adam},
	year = {2020},
	pages = {281--297},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/662FHYC8/Fried et al. - 2020 - Caladan Mitigating Interference at Microsecond Ti.pdf:application/pdf},
}

@inproceedings{ousterhout_shenango_2019,
	title = {Shenango: {Achieving} {High} \{{CPU}\} {Efficiency} for {Latency}-sensitive {Datacenter} {Workloads}},
	isbn = {978-1-931971-49-2},
	shorttitle = {Shenango},
	url = {https://www.usenix.org/conference/nsdi19/presentation/ousterhout},
	language = {en},
	urldate = {2024-09-22},
	author = {Ousterhout, Amy and Fried, Joshua and Behrens, Jonathan and Belay, Adam and Balakrishnan, Hari},
	year = {2019},
	pages = {361--378},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/3NBGGQNE/Ousterhout et al. - 2019 - Shenango Achieving High CPU Efficiency for Late.pdf:application/pdf},
}

@inproceedings{wolnikowski_zerializer_2021,
	address = {Ann Arbor Michigan},
	title = {Zerializer: towards zero-copy serialization},
	isbn = {978-1-4503-8438-4},
	shorttitle = {Zerializer},
	url = {https://dl.acm.org/doi/10.1145/3458336.3465283},
	doi = {10.1145/3458336.3465283},
	language = {en},
	urldate = {2024-09-22},
	booktitle = {Proceedings of the {Workshop} on {Hot} {Topics} in {Operating} {Systems}},
	publisher = {ACM},
	author = {Wolnikowski, Adam and Ibanez, Stephen and Stone, Jonathan and Kim, Changhoon and Manohar, Rajit and Soulé, Robert},
	month = jun,
	year = {2021},
	pages = {206--212},
	file = {Volltext:/local/home/pengxu/Zotero/storage/W6EFLY57/Wolnikowski et al. - 2021 - Zerializer towards zero-copy serialization.pdf:application/pdf},
}

@inproceedings{khalilov_osmosis_2024,
	title = {\{{OSMOSIS}\}: {Enabling} \{{Multi}-{Tenancy}\} in {Datacenter} \{{SmartNICs}\}},
	isbn = {978-1-939133-41-0},
	shorttitle = {\{{OSMOSIS}\}},
	url = {https://www.usenix.org/conference/atc24/presentation/khalilov},
	language = {en},
	urldate = {2024-09-22},
	author = {Khalilov, Mikhail and Chrapek, Marcin and Shen, Siyuan and Vezzu, Alessandro and Benz, Thomas and Girolamo, Salvatore Di and Schneider, Timo and Sensi, Daniele De and Benini, Luca and Hoefler, Torsten},
	year = {2024},
	pages = {247--263},
	file = {Full Text PDF:/local/home/pengxu/Zotero/storage/ATAY4FE8/Khalilov et al. - 2024 - OSMOSIS Enabling Multi-Tenancy in Datacenter .pdf:application/pdf},
}

@inproceedings{grant_smartnic_2020,
	address = {Virtual Event USA},
	title = {{SmartNIC} {Performance} {Isolation} with {FairNIC}: {Programmable} {Networking} for the {Cloud}},
	isbn = {978-1-4503-7955-7},
	shorttitle = {{SmartNIC} {Performance} {Isolation} with {FairNIC}},
	url = {https://dl.acm.org/doi/10.1145/3387514.3405895},
	doi = {10.1145/3387514.3405895},
	language = {en},
	urldate = {2024-09-22},
	booktitle = {Proceedings of the {Annual} conference of the {ACM} {Special} {Interest} {Group} on {Data} {Communication} on the applications, technologies, architectures, and protocols for computer communication},
	publisher = {ACM},
	author = {Grant, Stewart and Yelam, Anil and Bland, Maxwell and Snoeren, Alex C.},
	month = jul,
	year = {2020},
	pages = {681--693},
	file = {Volltext:/local/home/pengxu/Zotero/storage/8AWKFE8A/Grant et al. - 2020 - SmartNIC Performance Isolation with FairNIC Progr.pdf:application/pdf},
}

@article{sigelman_dapper_2010,
	title = {Dapper, a {Large}-{Scale} {Distributed} {Systems} {Tracing} {Infrastructure}},
	abstract = {Modern Internet services are often implemented as complex, large-scale distributed systems. These applications are constructed from collections of software modules that may be developed by different teams, perhaps in different programming languages, and could span many thousands of machines across multiple physical facilities. Tools that aid in understanding system behavior and reasoning about performance issues are invaluable in such an environment.},
	language = {en},
	journal = {Google Technical Report},
	author = {Sigelman, Benjamin H and Barroso, Luiz Andre and Burrows, Mike and Stephenson, Pat and Plakal, Manoj and Beaver, Donald and Jaspan, Saul and Shanbhag, Chandan},
	month = apr,
	year = {2010},
	file = {PDF:/local/home/pengxu/Zotero/storage/W5MH6U26/Sigelman et al. - Dapper, a Large-Scale Distributed Systems Tracing Infrastructure.pdf:application/pdf},
}

@inproceedings{zhou_smartnic_2024,
	address = {Athens Greece},
	title = {{SmartNIC} {Security} {Isolation} in the {Cloud} with {S}-{NIC}},
	isbn = {9798400704376},
	url = {https://dl.acm.org/doi/10.1145/3627703.3650071},
	doi = {10.1145/3627703.3650071},
	abstract = {Modern smart NICs provide little isolation between the network functions belonging to different tenants. These NICs also do not protect network functions from the datacenterprovided management OS which runs on the smart NIC. We describe concrete attacks which allow a network function’s state to leak to (or be modified by) another network function or the management OS. We then introduce S-NIC, a new hardware design for smart NICs that provides strong isolation guarantees. S-NIC pervasively virtualizes hardware accelerators, enforces single-owner semantics for each line in on-NIC cache and RAM, and provides dedicated bus bandwidth for each network function. Using this design, we eliminate side channels involving shared hardware state, and give each network function the illusion of having a private smart NIC. We show how these virtual NICs can be integrated with preexisting datacenter technologies for virtual LANs and trusted host-level computations like SGX enclaves. The overall result is that S-NIC enables strongly-isolated, NIC-accelerated datacenter applications; in these applications, network functions and host-level code receive hardware-guaranteed isolation from other applications and the datacenter provider.},
	language = {en},
	urldate = {2024-09-23},
	booktitle = {Proceedings of the {Nineteenth} {European} {Conference} on {Computer} {Systems}},
	publisher = {ACM},
	author = {Zhou, Yang and Wilkening, Mark and Mickens, James and Yu, Minlan},
	month = apr,
	year = {2024},
	pages = {851--869},
	file = {PDF:/local/home/pengxu/Zotero/storage/C9ZWPKMH/Zhou et al. - 2024 - SmartNIC Security Isolation in the Cloud with S-NIC.pdf:application/pdf},
}

@misc{ruzhanskaia_rethinking_2024,
	title = {Rethinking {Programmed} {I}/{O} for {Fast} {Devices}, {Cheap} {Cores}, and {Coherent} {Interconnects}},
	url = {http://arxiv.org/abs/2409.08141},
	abstract = {Conventional wisdom holds that an efficient interface between an OS running on a CPU and a high-bandwidth I/O device should be based on Direct Memory Access (DMA), descriptor rings, and interrupts: DMA offloads transfers from the CPU, descriptor rings provide buffering and queuing, and interrupts facilitate asynchronous interaction between cores and device with a lightweight notification mechanism.},
	language = {en},
	urldate = {2024-09-23},
	publisher = {arXiv},
	author = {Ruzhanskaia, Anastasiia and Xu, Pengcheng and Cock, David and Roscoe, Timothy},
	month = sep,
	year = {2024},
	note = {arXiv:2409.08141 [cs]},
	keywords = {Computer Science - Hardware Architecture, Computer Science - Operating Systems},
	file = {PDF:/local/home/pengxu/Zotero/storage/T3CNRD8Q/Ruzhanskaia et al. - 2024 - Rethinking Programmed IO for Fast Devices, Cheap Cores, and Coherent Interconnects.pdf:application/pdf},
}
